bindkey -v

bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word
bindkey '^r' history-incremental-search-backward

# function zle-line-init zle-keymap-select {
#     VIM_PROMPT="%{$fg_bold[yellow]%} [% NORMAL]%  %{$reset_color%}"
#     RPS1="${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/} $EPS1"
#     zle reset-prompt
# }


export PATH=/Users/snowp/Development/bag-of-scripts/gns:$PATH:/Users/snowp/.cargo/bin
export PATH=$PATH:/Users/snowp/Development/bag-o-tricks
export EDITOR=nvim
alias kck=kochiku
alias idea='pants idea --no-open'
alias dpants='PANTS_DEV=1 PANTS_SRC=~/Development/pants ./pants'
alias kidea='pkill -i idea'
alias grc='git rebase --continue'
alias amend='git commit --amend --no-edit'
alias amende='git commit --amend'
alias co='git co --'
alias cm='git co master'
alias gpf='git push -f'
alias gg='git pull origin master'
alias pull='git pull'
alias gs='git status'
alias gco='git checkout'
alias gcm='git checkout master'
alias grom='git rebase origin/master'
alias griom='git rebase -i origin/master'
alias gap='git add -p'
alias gcb='git checkout -b'
alias gt='git stash'
alias gsp='git stash pop'
alias gci='git commit'
alias gic='git commit -m'
alias zshrc='nvim ~/.zshrc; source ~/.zshrc'
alias tmuxrc='nvim ~/.tmux.conf'
alias v=nvim
alias sus='sort|uniq -c|sort'
alias j='cd $JH'
alias beep='be rubocop'

# fshow - git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

# fbr - checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
fbr() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
 }

fco() {
  local tags branches target
  tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
    (echo "$tags"; echo "$branches") | fzf -s --tac -- --no-hscroll --ansi +m -d "\t" -n 2) || return
  git checkout $(echo "$target" | awk '{print $2}')
}


# fco_preview - checkout git branch/tag, with a preview showing the commits between the tag/branch and HEAD
fco_preview() {
  local tags branches target
  tags=$(
git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
git branch --all | grep -v HEAD |
sed "s/.* //" | sed "s#remotes/[^/]*/##" |
sort -u | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
(echo "$tags"; echo "$branches") |
    fzf --no-hscroll --no-multi --delimiter="\t" -n 2 \
        --ansi --preview="git log -200 --pretty=format:%s $(echo {+2..} |  sed 's/$/../' )" ) || return
  git checkout $(echo "$target" | awk '{print $2}')
}

ftct() {
  ft=$1; shift

  pipe=$*
  if [ -z "$pipe" ]; then pipe="cat"; fi

  find . -name "*.$ft"|xargs wc -l|eval $pipe|sed '$d'|sort|awk '{s+=$1; print} END {printf "total: %d\n", s}'
}

roll(){
  if [ -z "$1" ]
  then
    echo "Need app name"
    return 1
  fi

  sha=""
  if [ -z "$2" ]
  then
    sha=`git rev-parse HEAD`
  else
    sha="$2"
  fi

  ~/Development/roller/roller "$1" "$sha"
}

HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000000
SAVEHIST=10000000
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.

REPORTTIME=10

fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

fkill() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}

export JH=~/Development/java
export GH=~/Development/go/src/square/up
export WH=~/Development/web

. /usr/local/etc/profile.d/z.sh

unalias z 2> /dev/null
z() {
    [ $# -gt 0 ] && _z "$*" && return
      cd "$(_z -l 2>&1 | fzf-tmux +s --tac --query "$*" | sed 's/^[0-9,.]* *//')"
    }


with_gpg1() {
  PATH=$(brew list gpg1|egrep -o "^.*gpgbin"|uniq):$PATH $@
}
alias build-files='find . -name "BUILD"'
alias p='git push'
alias be='bundle exec'
alias bees='be rspec'
alias beer='be rake'
alias jrg='rg --type java'
alias yrg='rg --type yaml'
alias brg='noglob rg -g BUILD*'
alias rrg='rg --type ruby'
alias prg='rg -g "*.proto"'
alias crg='rg --type cpp'

rename_build () {
  mv "$1" "$1.bazel"
  git checkout master "$1"
  git mv "$1" "$1.pants"
}
alias bs='noglob rg -g BUILD*'
alias groot='cd $(git rev-parse --show-toplevel|tee)'
alias pdep='pants depmap --minimal'
alias jruby-pid='pgrep -f "jruby.*Main"'
alias cf5='clang-format-5.0 -i'
isr() {
  pants idea --no-open $(pants changed --changed-changes-since=$1 --changed-include-dependees=transitive)
}


# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="robbyrussell"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(wd vi-mode)

# User configuration

#export PATH=$HOME/bin:/usr/local/bin:$PATH
# export MANPATH="/usr/local/man:$MANPATH"

# source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
# zle -N zle-line-init
# zle -N zle-keymap-select
export KEYTIMEOUT=8
bindkey -M viins 'jk' vi-cmd-mode
bindkey -v

# source "$HOME/.rvm/scripts/rvm"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


rp() { ruby -nle "puts $1" }

# Entirety of my startup file... then
if [[ "$PROFILE_STARTUP" == true ]]; then
    unsetopt xtrace
    exec 2>&3 3>&-
fi
wd() {
  . /Users/snowp/bin/wd/wd.sh
}
